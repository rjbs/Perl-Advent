=head1 Method::ParamValidator - Yet another validator for method parameters.

Why another? I was looking for param validators that can be shared amoung various Google API interfaces that I have worked on. None of the existing solutions worked for me. So I decided to create simple, yet easily configurable, param validator. The best part of this solution is that you can add the param validation programatically as well as configuration file.

=head1 DESIGN

There are two core methods C<add_field()> and C<add_method()> that can be used to setup validator of type L<Method::ParamValidator>.

=head2 add_field(\%params)

First step in creating a validator is to add fields that can be shared by one or many methods in a validator. You can provide the following keys to add new field.

=over 4

=item name    - unique field name (required).

=item format  - data type of the field (optional), possible values are 's' and 'd'. Default is 's'.

=item check   - code ref for custom check of the field (optional).

=item source  - lookup hashref for the acceptable values for the field (optional).

=item message - test message (optional).

=back

=head2 add_method(\%params)

After adding fields to the validator, it is time to add method to be validated. You can setup method by providing the following keys.

=over 4

=item name   - unique method name (required).

=item fields - hashref with field names.

=back

=head1 Example

Suppose, we want to validate method C<add_user()> and it accepts parameters as hashref with required keys C<firstname>, C<lastname> and C<age>. There is an optional key C<sex> as well. We will first add all the fields first and then we will add the method.

=head2 Manual Setup

    use Method::ParamValidator;
    my $validator = Method::ParamValidator->new;

    # Add fields
    $validator->add_field({ name => 'firstname', format => 's' });
    $validator->add_field({ name => 'lastname',  format => 's' });
    $validator->add_field({ name => 'age',       format => 'd' });
    $validator->add_field({ name => 'sex',       format => 's' });

    # Add method
    $validator->add_method({ name => 'add_user', fields => { firstname => 1, lastname => 1, age => 1, sex => 0} });

=head2 Configuration Setup

We can setup the validator using configuration file C<config.json>. Here is the setup to replicate the above checks.

    { "fields"  : [ { "name" : "firstname", "format" : "s" },
                    { "name" : "lastname",  "format" : "s" },
                    { "name" : "age",       "format" : "d" },
                    { "name" : "sex",       "format" : "s" }
                  ],
      "methods" : [ { "name"  : "add_user",
                      "fields": { "firstname" : "1",
                                  "lastname"  : "1",
                                  "age"       : "1",
                                  "sex"       : "0"
                                }
                    }
                  ]
    }

Now create validator using configuraton file C<config.json>.

    use Method::ParamValidator;
    my $validator = Method::ParamValidator->new({ config => "config.json" });

=head2 Validate the method C<add_user()> now.

    use Test::More;
    use Test::Exception;

    throws_ok { $validator->validate('get_xyz')  } qr/Invalid method name received/;
    throws_ok { $validator->validate('add_user') } qr/Missing parameters/;
    throws_ok { $validator->validate('add_user', []) } qr/Invalid parameters data structure/;
    throws_ok { $validator->validate('add_user', { firstname => 'F', lastname => 'L', age => 'A' }) } qr/Parameter failed check constraint/;
    throws_ok { $validator->validate('add_user', { firstname => 'F', lastname => 'L', age => 10, sex => 's' }) } qr/Parameter failed check constraint/;
    throws_ok { $validator->validate('add_user', { firstname => 'F', lastname => 'L' }) } qr/Missing required parameter/;
    throws_ok { $validator->validate('add_user', { firstname => 'F', lastname => undef, age => 10 }) } qr/Undefined required parameter/;
    throws_ok { $validator->validate('add_user', { firstname => 'F' }) } qr/Missing required parameter/;
    throws_ok { $validator->validate('add_user', { firstname => 'F', lastname => 'L', age => 40, location => 'X' })  } qr/Parameter failed check constraint/;
    lives_ok  { $validator->validate('add_user', { firstname => 'F', lastname => 'L', age => 40, location => 'UK' }) };
    lives_ok  { $validator->validate('add_user', { firstname => 'F', lastname => 'L', age => 40, location => 'uk' }) };

    done_testing();

=head1 Check Method Hookup

When adding field to a validator, you can hookup your own checks. Below we are adding new field C<location> with custom check method C<lookup()>.

=head2 Manual Setup

    my $LOCATION = { 'USA' => 1, 'UK' => 1 };
    sub lookup { exists $LOCATION->{uc($_[0])} };

    # Add field with custom check
    $validator->add_field({ name => 'location', format => 's', check => \&lookup });

    # Add method using the new field with custom check
    $validator->add_method({ name => 'check_location', fields => { location => 1 }});

=head2 Configuration Setup

Lets do the custom checks using configuration file C<check.json>.

    {
        "fields"  : [{ "name" : "location", "format" : "s", "source": [ "USA", "UK" ] } ],
        "methods" : [{ "name" : "check_location", "fields": { "location" : "1" } } ]
    }

We will now create validator using the above configuration file C<check.json>.

    use Method::ParamValidator;
    my $validator = Method::ParamValidator->new({ config => "check.json" });

=head2 Validate the method C<check_location()> now.

    use Test::More;
    use Test::Exception;

    throws_ok { $validator->validate('check_location', { location => 'X' }) } qr/Parameter failed check constraint/;
    done_testing();

=head1 Extend Moo Package

If you want to plug the validator to an existing C<Moo> package. Lets create package C<Calculator>.

    package Calculator;

    use Moo;

    sub do {
        my ($self, $param) = @_;

        if ($param->{op} eq 'add') {
            return ($param->{a} + $param->{b});
        }
        elsif ($param->{op} eq 'sub') {
            return ($param->{a} - $param->{b});
        }
        elsif ($param->{op} eq 'mul') {
            return ($param->{a} * $param->{b});
        }
    }

Now it is time to create configuration file C<calc.json> for validator.

    { "fields"  : [ { "name" : "op", "format" : "s", "source": [ "add", "sub", "mul" ] },
                    { "name" : "a",  "format" : "d" },
                    { "name" : "b",  "format" : "d" }
                  ],
      "methods" : [ { "name"  : "do",
                      "fields": { "op" : "1",
                                  "a"  : "1",
                                  "b"  : "1"
                                }
                    }
                  ]
    }

Add the following lines to plug the validator.

    use Method::ParamValidator;

    has 'validator' => (
        is      => 'ro',
        default => sub { Method::ParamValidator->new(config => "calc.json") }
    );

    before [qw/do/] => sub {
        my ($self, $param) = @_;

        my $method = (caller(1))[3];
        $method =~ /(.*)\:\:(.*)$/;
        $self->validator->validate($2, $param);
    };

For the love of TDD, lets define the unit test.

    use Test::More;
    use Test::Exception;
    use Calculator;

    my $calc = Calculator->new;

    is($calc->do({ op => 'add', a => 4, b => 2 }), 6);
    is($calc->do({ op => 'sub', a => 4, b => 2 }), 2);
    is($calc->do({ op => 'mul', a => 4, b => 2 }), 8);

    throws_ok { $calc->do({ op => 'add' }) } qr/Missing required parameter. \(a\)/;
    throws_ok { $calc->do({ op => 'add', a => 1 }) } qr/Missing required parameter. \(b\)/;
    throws_ok { $calc->do({ op => 'x', a => 1, b => 2 }) } qr/Parameter failed check constraint. \(op\)/;
    throws_ok { $calc->do({ op => 'add', a => 'x', b => 2 }) } qr/Parameter failed check constraint. \(a\)/;
    throws_ok { $calc->do({ op => 'add', a => 1, b => 'x' }) } qr/Parameter failed check constraint. \(b\)/;

    done_testing();

=head1 Conclusion

I have used L<Method::ParamValidator> to one of my Google API interface L<WWW::Google::Places>. Any help to extend the validator would be highly appreciated. Or if you have any suggestions please raise them at L<GitHub|https://github.com/manwar/Method-ParamValidator>.

=cut
